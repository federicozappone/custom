{
  "Publisher": {
    "prefix": "pub",
    "body": [
      "#include <chrono>",
      "#include <functional>",
      "#include <memory>",
      "#include <string>",
      "",
      "#include \"rclcpp/rclcpp.hpp\"",
      "#include \"std_msgs/msg/string.hpp\"",
      "",
      "using namespace std::chrono_literals;",
      "",
      "/* This example creates a subclass of Node and uses std::bind() to register a",
      "* member function as a callback from the timer. */",
      "",
      "class MinimalPublisher : public rclcpp::Node",
      "{",
      "  public:",
      "    MinimalPublisher()",
      "    : Node(\"minimal_publisher\"), count_(0)",
      "    {",
      "      publisher_ = this->create_publisher<std_msgs::msg::String>(\"topic\", 10);",
      "      timer_ = this->create_wall_timer(",
      "      500ms, std::bind(&MinimalPublisher::timer_callback, this));",
      "    }",
      "",
      "  private:",
      "    void timer_callback()",
      "    {",
      "      auto message = std_msgs::msg::String();",
      "      message.data = \"Hello, world! \" + std::to_string(count_++);",
      "      RCLCPP_INFO(this->get_logger(), \"Publishing: '%s'\", message.data.c_str());",
      "      publisher_->publish(message);",
      "    }",
      "    rclcpp::TimerBase::SharedPtr timer_;",
      "    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;",
      "    size_t count_;",
      "};",
      "",
      "int main(int argc, char * argv[])",
      "{",
      "  rclcpp::init(argc, argv);",
      "  rclcpp::spin(std::make_shared<MinimalPublisher>());",
      "  rclcpp::shutdown();",
      "  return 0;",
      "}"
    ],
    "description": "Simple ROS2 C++ Publisher"
  },

  "Subscriber": {
    "prefix": "sub",
    "body": [
      "#include <memory>",
      "",
      "#include \"rclcpp/rclcpp.hpp\"",
      "#include \"std_msgs/msg/string.hpp\"",
      "using std::placeholders::_1;",
      "",
      "class MinimalSubscriber : public rclcpp::Node",
      "{",
      "  public:",
      "    MinimalSubscriber()",
      "    : Node(\"minimal_subscriber\")",
      "    {",
      "      subscription_ = this->create_subscription<std_msgs::msg::String>(",
      "      \"topic\", 10, std::bind(&MinimalSubscriber::topic_callback, this, _1));",
      "    }",
      "",
      "  private:",
      "    void topic_callback(const std_msgs::msg::String::SharedPtr msg) const",
      "    {",
      "      RCLCPP_INFO(this->get_logger(), \"I heard: '%s'\", msg->data.c_str());",
      "    }",
      "    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;",
      "};",
      "",
      "int main(int argc, char * argv[])",
      "{",
      "  rclcpp::init(argc, argv);",
      "  rclcpp::spin(std::make_shared<MinimalSubscriber>());",
      "  rclcpp::shutdown();",
      "  return 0;",
      "}"
    ],
    "description": "Simple ROS2 C++ Subscriber"
  },

  "Service": {
    "prefix": "ser",
    "body": [
      "#include \"rclcpp/rclcpp.hpp\"",
      "#include \"std_srvs/srv/empty.hpp\"",
      "",
      "class MyServiceNode : public rclcpp::Node",
      "{",
      "public:",
      "    MyServiceNode() : Node(\"my_service_node\")",
      "    {",
      "        // Create a service",
      "        service_ = this->create_service<std_srvs::srv::Empty>(",
      "            \"my_service\", std::bind(&MyServiceNode::onServiceRequest, this, std::placeholders::_1, std::placeholders::_2));",
      "    }",
      "",
      "private:",
      "    void onServiceRequest(const std::shared_ptr<std_srvs::srv::Empty::Request> request,",
      "                          std::shared_ptr<std_srvs::srv::Empty::Response> response)",
      "    {",
      "        // Handle the service request here",
      "        RCLCPP_INFO(this->get_logger(), \"Service called\");",
      "    }",
      "",
      "    rclcpp::Service<std_srvs::srv::Empty>::SharedPtr service_;",
      "};",
      "",
      "int main(int argc, char *argv[])",
      "{",
      "    rclcpp::init(argc, argv);",
      "    rclcpp::spin(std::make_shared<MyServiceNode>());",
      "    rclcpp::shutdown();",
      "    return 0;",
      "}"
    ],
    "description": "Simple ROS2 C++ Service"
  },

  "IK Service": {
    "prefix": "ik",
    "body": [
      "#include \"rclcpp/rclcpp.hpp\"",
      "#include \"$WORKSPACE_NAME/srv/inverse_kinematics.hpp\"",
      "",
      "class InverseKinematicsServiceNode : public rclcpp::Node",
      "{",
      "public:",
      "    InverseKinematicsServiceNode() : Node(\"inverse_kinematics_service_node\")",
      "    {",
      "        // Create the InverseKinematics service",
      "        inverse_kinematics_service_ = this->create_service<$WORKSPACE_NAME::srv::InverseKinematics>(",
      "            \"inverse_kinematics\",",
      "            std::bind(&InverseKinematicsServiceNode::onInverseKinematicsRequest, this, std::placeholders::_1, std::placeholders::_2));",
      "    }",
      "",
      "private:",
      "    void onInverseKinematicsRequest(",
      "        const std::shared_ptr<$WORKSPACE_NAME::srv::InverseKinematics::Request> request,",
      "        std::shared_ptr<$WORKSPACE_NAME::srv::InverseKinematics::Response> response)",
      "    {",
      "        // Handle the inverse kinematics request here",
      "        // Calculate joint angles based on the given position (x, y, z)",
      "        ",
      "        // Example: For simplicity, let's just set the joint angles to 1.0 for all joints",
      "        response->j1 = 1.0;",
      "        response->j2 = 1.0;",
      "        response->j3 = 1.0;",
      "        response->j4 = 1.0;",
      "        response->j5 = 1.0;",
      "        response->j6 = 1.0;",
      "        ",
      "        RCLCPP_INFO(this->get_logger(), \"Inverse Kinematics Service called with x=%f, y=%f, z=%f\", request->x, request->y, request->z);",
      "    }",
      "",
      "    rclcpp::Service<$WORKSPACE_NAME::srv::InverseKinematics>::SharedPtr inverse_kinematics_service_;",
      "};",
      "",
      "int main(int argc, char *argv[])",
      "{",
      "    rclcpp::init(argc, argv);",
      "    rclcpp::spin(std::make_shared<InverseKinematicsServiceNode>());",
      "    rclcpp::shutdown();",
      "    return 0;",
      "}",
      "",
      "/**",
      " * Add the following lines to the CMakeLists.txt",
      "",
      "find_package(rclcpp REQUIRED)",
      "find_package(geometry_msgs REQUIRED)",
      "find_package(rosidl_default_generators REQUIRED)",
      "find_package($WORKSPACE_NAME REQUIRED)",
      "",
      "rosidl_generate_interfaces(${PROJECT_NAME}",
      "  \"srv/InverseKinematics.srv\"",
      "  DEPENDENCIES geometry_msgs",
      ")",
      "",
      "add_executable(ik_service src/ik_service.cpp)",
      "ament_target_dependencies(ik_service rclcpp geometry_msgs $WORKSPACE_NAME)",
      "",
      "install(TARGETS",
      "  ik_service",
      "  DESTINATION lib/${PROJECT_NAME})",
      "",
      " * Add the following lines within the <package> element of package.xml",
      "",
      "",
      "<depend>geometry_msgs</depend>",
      "<buildtool_depend>rosidl_default_generators</buildtool_depend>",
      "<exec_depend>rosidl_default_runtime</exec_depend>",
      "<member_of_group>rosidl_interface_packages</member_of_group>",
      "",
      "",
      " * Create the service definition file in $WORKSPACE_NAME/srv/InverseKinematics.srv",
      "",
      "",
      "float32 x",
      "float32 y",
      "float32 z",
      "---",
      "float32 j1",
      "float32 j2",
      "float32 j3",
      "float32 j4",
      "float32 j5",
      "float32 j6",
      "",
      "*/"
    ],
    "description": "Simple ROS2 C++ Service"
  },

  "Frame Broadcaster": {
    "prefix": "frame_broadcaster",
    "body": [
      "#include <chrono>",
      "#include <functional>",
      "#include <memory>",
      "#include \"geometry_msgs/msg/transform_stamped.hpp\"",
      "#include \"rclcpp/rclcpp.hpp\"",
      "#include \"tf2_ros/transform_broadcaster.h\"",
      "",
      "using namespace std::chrono_literals;",
      "",
      "class FixedFrameBroadcaster : public rclcpp::Node",
      "{",
      "public:",
      "  FixedFrameBroadcaster() : Node(\"fixed_frame_tf2_broadcaster\")",
      "  {",
      "    tf_broadcaster_ = std::make_shared<tf2_ros::TransformBroadcaster>(this);",
      "    timer_ = this->create_wall_timer(",
      "        100ms, std::bind(&FixedFrameBroadcaster::broadcast_timer_callback, this));",
      "  }",
      "",
      "private:",
      "  void broadcast_timer_callback()",
      "  {",
      "    geometry_msgs::msg::TransformStamped t;",
      "",
      "    t.header.stamp = this->get_clock()->now();",
      "    t.header.frame_id = \"turtle1\";",
      "    t.child_frame_id = \"carrot1\";",
      "    t.transform.translation.x = 0.0;",
      "    t.transform.translation.y = 2.0;",
      "    t.transform.translation.z = 0.0;",
      "    t.transform.rotation.x = 0.0;",
      "    t.transform.rotation.y = 0.0;",
      "    t.transform.rotation.z = 0.0;",
      "    t.transform.rotation.w = 1.0;",
      "",
      "    tf_broadcaster_->sendTransform(t);",
      "  }",
      "",
      "  rclcpp::TimerBase::SharedPtr timer_;",
      "  std::shared_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;",
      "};",
      "",
      "int main(int argc, char* argv[])",
      "{",
      "  rclcpp::init(argc, argv);",
      "  rclcpp::spin(std::make_shared<FixedFrameBroadcaster>());",
      "  rclcpp::shutdown();",
      "  return 0;",
      "}"
    ],
    "description": "Simple ROS2 C++ Service"
  }

}

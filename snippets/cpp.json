{
  "header guard": {
    "prefix": "header_guard",
    "body": [
      "#ifndef ${1:DEBUG}_H",
      "#define $1_H",
      "$0",
      "#endif  // $1_H"
    ],
    "description": "Header guard"
  },

  "header": {
    "prefix": "header",
    "body": [
      "#ifndef ${1:DEBUG}_H",
      "#define $1_H",
      "",
      "namespace ${2:name} {",
      "",
      "class ${3:MyClass}",
      "{",
      "public:",
      "\t$3() = default;",
      "\t$3($3&&) = default;",
      "\t$3(const $3&) = default;",
      "\t$3& operator=($3&&) = default;",
      "\t$3& operator=(const $3&) = default;",
      "\tvirtual ~$3() = default;",
      "",
      "private:",
      "};",
      "",
      "}  // namespace $2",
      "",
      "#endif  // $1_H"
    ],
    "description": "Header with a simple class"
  },

  "header simple": {
    "prefix": "header_simple",
    "body": [
      "#ifndef ${1:DEBUG}_H",
      "#define $1_H",
      "",
      "namespace ${2:name} {",
      "",
      "class ${3:MyClass}",
      "{",
      "public:",
      "\t$3();",
      "\tvirtual ~$3();",
      "",
      "private:",
      "};",
      "",
      "}  // namespace $2",
      "",
      "#endif  // $1_H"
    ],
    "description": "Header with a simpler class"
  },

  "class": {
    "prefix": "class",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1() = default;",
      "\t$1($1&&) = default;",
      "\t$1(const $1&) = default;",
      "\t$1& operator=($1&&) = default;",
      "\t$1& operator=(const $1&) = default;",
      "\tvirtual ~$1() = default;",
      "",
      "private:",
      "};"
    ],
    "description": "Simple class with default methods"
  },

  "simple class": {
    "prefix": "simple_class",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1();",
      "\tvirtual ~$1();",
      "",
      "private:",
      "};"
    ],
    "description": "Simple class"
  },

  "format off": {
    "prefix": "format_off",
    "body": [
      "// clang-format off"
    ],
    "description": "Clang format off"
  },

  "format on": {
    "prefix": "format_on",
    "body": [
      "// clang-format on"
    ],
    "description": "Clang format on"
  },

  "ostream": {
    "prefix": "ostream",
    "body": [
      "friend std::ostream& operator<<(std::ostream& stream, const ${1:Class_Name}& obj)",
      "{",
      "  stream << \"Hello from $1!\";",
      "  return stream;",
      "}"
    ],
    "description": "Output stream template"
  },

  "threaded class": {
    "prefix": "threaded_class",
    "body": [
      "class ${1:Threaded_Class}",
      "{",
      "public:",
      "  $1() : is_running_(false) {}",
      "",
      "  void start()",
      "  {",
      "    if (!is_running_)",
      "    {",
      "      is_running_ = true;",
      "      thread_obj_ = std::thread(&$1::dispatch_, this);",
      "      thread_obj_.detach();",
      "      std::cout << \"Thread started.\\n\";",
      "    }",
      "  }",
      "",
      "  void stop()",
      "  {",
      "    if (is_running_)",
      "    {",
      "      is_running_ = false;",
      "      if (thread_obj_.joinable())",
      "      {",
      "        thread_obj_.join();",
      "      }",
      "      std::cout << \"Thread stopped.\\n\";",
      "    }",
      "  }",
      "",
      "protected:",
      "  void dispatch_()",
      "  {",
      "    while (is_running_)",
      "    {",
      "      std::cout << \"Thread is running...\\n\";",
      "      std::this_thread::sleep_for(std::chrono::milliseconds(1000));",
      "    }",
      "  }",
      "",
      "private:",
      "  std::thread thread_obj_;",
      "  std::atomic<bool> is_running_;",
      "};"
    ],
    "description": "Simple threaded class"
  },

  "sleep milliseconds": {
    "prefix": "sleep_milliseconds",
    "body": [
      "std::this_thread::sleep_for(std::chrono::milliseconds(${1:1000}));"
    ],
    "description": "Sleep for a number of milliseconds"
  },

  "sleep seconds": {
    "prefix": "sleep_seconds",
    "body": [
      "std::this_thread::sleep_for(std::chrono::seconds(${1:1}));"
    ],
    "description": "Sleep for a number of seconds"
  },

  "threaded class with callbacks": {
    "prefix": "threaded_class_callbacks",
    "body": [
      "#include <atomic>",
      "#include <iostream>",
      "#include <memory>",
      "#include <thread>",
      "#include <chrono>",
      "#include <functional>",
      "#include <vector>",
      "#include <mutex>",
      "",
      "class $1;",
      "",
      "class $1_Callback",
      "{",
      "  friend class $1;",
      "",
      "public:",
      "  $1_Callback($1& manager) : manager_(manager) { in_callback_ = false; }",
      "  virtual ~$1_Callback() {}",
      "",
      "  virtual void callback_fn() = 0;",
      "",
      "private:",
      "  $1& manager_;",
      "  std::atomic<bool> in_callback_;",
      "  std::atomic<bool> should_remove_;",
      "};",
      "",
      "class ${1:Manager}",
      "{",
      "  friend class $1_Callback;",
      "",
      "public:",
      "  $1() : is_running_(false) {}",
      "  virtual ~$1() { stop(); }",
      "",
      "  void start()",
      "  {",
      "    if (!is_running_)",
      "    {",
      "      is_running_ = true;",
      "      thread_obj_ = std::thread(&$1::dispatch_, this);",
      "      std::cout << \"Thread started.\\n\";",
      "    }",
      "  }",
      "",
      "  void stop()",
      "  {",
      "    if (is_running_)",
      "    {",
      "      is_running_ = false;",
      "      if (thread_obj_.joinable())",
      "      {",
      "        thread_obj_.join();",
      "      }",
      "      std::cout << \"Thread stopped.\\n\";",
      "    }",
      "  }",
      "",
      "  void register_callback(std::shared_ptr<$1_Callback> callback)",
      "  {",
      "    std::lock_guard<std::mutex> lock(callbacks_mutex_);",
      "    callback->should_remove_ = false;",
      "    callbacks_.push_back(callback);",
      "  }",
      "",
      "  void unregister_callback(std::shared_ptr<$1_Callback> callback)",
      "  {",
      "    if (callback->in_callback_ == true)",
      "    {",
      "      callback->should_remove_ = true;",
      "      while (callback->in_callback_ == true)",
      "      {",
      "        std::this_thread::sleep_for(std::chrono::milliseconds(10));",
      "      }",
      "    }",
      "    else",
      "    {",
      "      std::lock_guard<std::mutex> lock(callbacks_mutex_);",
      "      callbacks_.erase(std::remove(callbacks_.begin(), callbacks_.end(), callback),",
      "                       callbacks_.end());",
      "    }",
      "  }",
      "",
      "private:",
      "  std::thread thread_obj_;",
      "  std::atomic<bool> is_running_;",
      "  std::vector<std::shared_ptr<$1_Callback>> callbacks_;",
      "  std::mutex callbacks_mutex_;",
      "",
      "  void dispatch_()",
      "  {",
      "    while (is_running_)",
      "    {",
      "      execute_callbacks_();",
      "    }",
      "  }",
      "",
      "  void execute_callbacks_()",
      "  {",
      "    std::lock_guard<std::mutex> lock(callbacks_mutex_);",
      "    for (auto& callback : callbacks_)",
      "    {",
      "      callback->in_callback_ = true;",
      "      callback->callback_fn();",
      "      if (callback->should_remove_ == true)",
      "      {",
      "        callbacks_.erase(std::remove(callbacks_.begin(), callbacks_.end(), callback),",
      "                         callbacks_.end());",
      "      }",
      "      callback->in_callback_ = false;",
      "    }",
      "  }",
      "};",
      "",
      "class $1_Callback_Impl : public $1_Callback",
      "{",
      "public:",
      "  $1_Callback_Impl($1& manager) : $1_Callback(manager) {}",
      "  void callback_fn() override",
      "  {",
      "    std::cout << \"Hello from $1_Callback_Impl.\\n\";",
      "    std::this_thread::sleep_for(std::chrono::seconds(1));",
      "  }",
      "};",
      "",
      "int main()",
      "{",
      "  $1 manager;",
      "  auto cb1 = std::make_shared<$1_Callback_Impl>(manager);",
      "  manager.start();",
      "",
      "  manager.register_callback(cb1);",
      "  std::this_thread::sleep_for(std::chrono::seconds(5));",
      "  manager.unregister_callback(cb1);",
      "  std::this_thread::sleep_for(std::chrono::seconds(5));",
      "  manager.register_callback(cb1);",
      "  std::this_thread::sleep_for(std::chrono::seconds(5));",
      "",
      "  manager.stop();",
      "",
      "  return 0;",
      "}"
    ],
    "description": "Simple threaded class with callbacks"
  },

  "singleton": {
    "prefix": "singleton",
    "body": [
      "class ${1:Singleton}",
      "{",
      "public:",
      "  static $1& get_instance()",
      "  {",
      "    static $1 instance;",
      "    return instance;",
      "  }",
      "",
      "  $1(const $1&) = delete;",
      "  $1& operator=(const $1&) = delete;",
      "",
      "private:",
      "  $1() {}",
      "};"
    ],
    "description": "Singleton"
  },

  "Ptr typedef": {
    "prefix": "ptr_typedef",
    "body": [
      "typedef std::shared_ptr<${1:Class_Name}> Ptr;"
    ],
    "description": "Class ptr definition"
  },

  "Doxygen header": {
    "prefix": "docheader",
    "body": [
      "/**",
      " * @file $TM_FILENAME",
      " * @brief ${1:brief description}",
      " *",
      " * @author Federico Zappone",
      " * @date $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      " */"
    ],
    "description": "Doxygen header"
  },

  "Doxygen header full": {
    "prefix": "docheader",
    "body": [
      "/**",
      " * @file $TM_FILENAME",
      " * @brief ${1:This file contains the implementation of a sample program.}",
      " *",
      " * @details",
      " * ${2:The program demonstrates basic usage of classes and functions to perform",
      " * common tasks. It includes a main function that serves as the entry point",
      " * for the application.}",
      " *",
      " * @author",
      " * Federico Zappone <federico.zappone@gmail.com>",
      " *",
      " * @date",
      " * Created on: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      " *",
      " * @license",
      " * This program is free software; you can redistribute it and/or modify it",
      " * under the terms of the MIT License as published by the Open Source",
      " * Initiative.",
      " *",
      " * @note",
      " * For more information, see https://opensource.org/licenses/MIT.",
      " */"
    ],
    "description": "Doxygen header full"
  },

  "Standard Cout": {
    "prefix": "cout",
    "body": [
      "std::cout << ${1:value} << \"\\n\";"
    ],
    "description": "Snippet description"
  },

  "Random Normal Distribution": {
    "prefix": "random_normal",
    "body": [
      "std::default_random_engine generator;",
      "std::normal_distribution<double> distribution(${1:mean}, ${2:std_dev});",
      "distribution(generator);"
    ],
    "description": "Random Normal Distribution"
  },

  "Random Uniform Distribution": {
    "prefix": "random_uniform",
    "body": [
      "std::default_random_engine generator;",
      "std::uniform_real_distribution<double> distribution(${1:a}, ${2:b});",
      "distribution(generator);"
    ],
    "description": "Random Uniform Distribution"
  },

  "Insert": {
    "prefix": "insert",
    "body": [
      "${1:vec}.insert(std::end($1), std::begin(${2:other}), std::end($2));"
    ],
    "description": "Vector insertion"
  },

  "Main": {
    "prefix": "main",
    "body": [
      "#include <iostream>",
      "",
      "int main(int argc, char ** argv)",
      "{",
      "  (void) argc;",
      "  (void) argv;",
      "",
      "  std::cout << \"Hello world!\\n\";",
      "  return 0;",
      "}"
    ],
    "description": "Simple main"
  }
}
